{% set url_texlive_docker_image = (
    'https://github.com/das7pad/sharelatex-docker-images.git#:texlive'
  ) %}
{% set tag_texlive_docker_image = (
    'quay.io/sharelatex/texlive-full:2017.1'
  ) %}
{% set tag_app_docker_image = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':$BRANCH_NAME-$BUILD_NUMBER'
  ) %}
pipeline {
  agent {
    label 'sharelatex'
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
  }

  stages {
{% if name in [
    'clsi',
  ] %}
    stage('Prepare environment') {
      stages {
        {% if name == 'clsi' %}
        stage('Pull Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          environment {
            TEXLIVE_IMAGE = "$SHARELATEX_DOCKER_REPOS/texlive:full-2017"
          }
          steps {
            script {
              sh  '''
                  set -ex
                  docker pull $TEXLIVE_IMAGE \
                  || (
                    docker build \
                      -t $TEXLIVE_IMAGE \
                      --build-arg TEXLIVE_SCHEME=full \
                      {{ url_texlive_docker_image }} \
                    && \
                    docker push $TEXLIVE_IMAGE
                  )
                  '''
              sh 'docker tag $TEXLIVE_IMAGE {{ tag_texlive_docker_image }}'
            }
          }
        }
        stage('Build Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS == null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          steps {
            script {
              sh  '''
                  docker build \
                    -t {{ tag_texlive_docker_image }} \
                    --build-arg TEXLIVE_SCHEME=full \
                    {{ url_texlive_docker_image }}
                  '''
            }
          }
        }
        {% endif %}
      }
    }
{% endif %}
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }
{% block lint %}

        stage('Linting') {
          steps {
            sh 'make lint'
          }
        }
{% endblock %}

        stage('Unit Tests') {
          steps {
            sh 'make test_unit'
          }
        }

{% block acceptance_tests %}
{% if acceptance_creds == 'aws' %}
        stage('Acceptance Tests S3') {
          when {
            allOf {
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET != null
              }
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS != null
              }
            }
          }
          environment {
            AWS_BUCKET = "$SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET"
            AWS_ACCESS = credentials('SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS')
            AWS_ACCESS_KEY_ID = "$AWS_ACCESS_USR"
            AWS_SECRET_ACCESS_KEY = "$AWS_ACCESS_PSW"
          }
          steps {
            script {
              sh 'make test_acceptance'
            }
          }
        }
{% else %}
        stage('Acceptance Tests') {
          steps {
            script {
              sh 'make test_acceptance'
            }
          }
        }
{% endif %}
{% endblock %}
      }
    }

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('docker push') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE = "{{ tag_app_docker_image }}"
          }
          steps {
            script {
              sh 'docker build -t $IMAGE .'
              sh 'docker push $IMAGE'
              sh 'docker rmi $IMAGE'
            }
          }
        }
      }
    }
  }

{% block post %}
  post {
    always {
      sh 'make test_clean'
      sh 'make clean'
    }
  }
{% endblock %}
}

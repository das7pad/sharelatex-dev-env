{% from 'macros/header.j2' import header with context %}
{{ header('//') }}

{% set docker_image_app = (
    name + ':$BRANCH_NAME-$BUILD_NUMBER'
  ) %}
{% set docker_image_app_origin = (
    '$SHARELATEX_DOCKER_REPOS/' + docker_image_app
  ) %}
{% set docker_image_app_origin_branch = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':$BRANCH_NAME'
  ) %}
{% set docker_image_app_origin_branch_dev = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':dev'
  ) %}
{% set agent_label = (
    'sharelatex && docker_socket_access'
    if name == 'clsi' else
    'sharelatex'
  ) %}
pipeline {
  agent {
    label '{{ agent_label }}'
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
    IMAGE_CI = "ci/{{ docker_image_app }}"
    IMAGE_NODE = 'node:{{ node_version }}'
    IMAGE = "{{ docker_image_app_origin }}"
    IMAGE_BRANCH = "{{ docker_image_app_origin_branch }}"
    IMAGE_BRANCH_DEV = "{{ docker_image_app_origin_branch_dev }}"
    IMAGE_CACHE_HOT_DEV_DEPS = "$IMAGE_BRANCH-dev-deps"
  }

  stages {
    stage('Prepare environment') {
      stages {
{% block pull_external %}
{% endblock %}
        stage('Pull node image') {
            when {
                expression {
                    env.DOCKER_REGISTRY != null
                }
            }
            steps {
                sh 'docker pull $DOCKER_REGISTRY/$IMAGE_NODE'
                sh 'docker tag $DOCKER_REGISTRY/$IMAGE_NODE $IMAGE_NODE'
            }
        }
        stage('Pull Cache') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE_CACHE_COLD = "$IMAGE_BRANCH_DEV-dev-deps"
            IMAGE_CACHE_CI_DEV_DEPS = "$IMAGE_CI-dev-deps-cache"
          }
          steps {
            sh '''
              docker pull $IMAGE_CACHE_HOT_DEV_DEPS \
              && docker tag $IMAGE_CACHE_HOT_DEV_DEPS $IMAGE_CACHE_CI_DEV_DEPS \
              || (docker pull $IMAGE_CACHE_COLD \
              && docker tag $IMAGE_CACHE_COLD $IMAGE_CACHE_CI_DEV_DEPS) \
              || echo 'build cache not available'
            '''
          }
          post {
            cleanup {
              sh '''
                docker rmi --force \
                  $IMAGE_CACHE_HOT_DEV_DEPS \
                  $IMAGE_CACHE_COLD \
              '''
            }
          }
        }
        stage('Cleanup and Create Output Directory For Test Results') {
          steps {
            sh 'mkdir --parents --mode=777 output'
            sh '''
              docker run --rm \
                --volume $PWD/output:/home/node \
                --user node \
                $IMAGE_NODE \
                sh -c 'find /home/node -mindepth 1 | xargs rm -rfv'
            '''
          }
        }
        stage('Clean Previous artifacts') {
          steps {
            sh 'git clean -xdf'
            sh 'mkdir --parents --mode=777 output'
          }
        }
      }
    }
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }

        stage('Post Build') {
          parallel {
            stage('Push dev-deps') {
              when {
                expression {
                  env.SHARELATEX_DOCKER_REPOS != null
                }
              }
              steps {
                sh '''
                  docker tag $IMAGE_CI-dev-deps $IMAGE_CACHE_HOT_DEV_DEPS
                '''
                sh 'docker push $IMAGE_CACHE_HOT_DEV_DEPS'
              }
              post {
                cleanup {
                  sh 'docker rmi --force $IMAGE_CACHE_HOT_DEV_DEPS'
                }
              }
            }
            stage('Static Code Analysis') {
              parallel {
                stage('Lint') {
                  steps {
                    sh 'make lint'
                  }
                }

                stage('Formatting') {
                  steps {
                    sh 'make format'
                  }
                }
              }
            }
          }
        }

        stage('Test') {
          parallel {
{% if has_unit_tests %}
            stage('Unit Tests') {
              steps {
                sh 'make test_unit'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/unit.xml')])
                }
              }
            }
{% endif %}
{% if has_acceptance_tests %}
            stage('App Acceptance Tests') {
              steps {
                sh 'make test_acceptance_app'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/acceptance.xml')])
                }
                cleanup {
                  sh 'make clean_test_acceptance_app'
                }
              }
            }
{% endif %}
{% if has_frontend_tests %}
            stage('Frontend Tests') {
              steps {
                sh 'make test_frontend_build_run'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/frontend.xml')])
                }
                cleanup {
                  sh 'make clean_test_frontend'
                }
              }
            }
{% endif %}
{% if has_modules %}
            stage('Module Acceptance Tests') {
              steps {
                sh 'make test_acceptance_modules_run_ci'
              }
              post {
                always {
                  xunit (tools: [JUnit(pattern: 'output/module_*.xml')])
                }
                cleanup {
                  sh 'make clean_test_acceptance_modules'
                }
              }
            }
{% endif %}
          }
        }
      }
    }
{% if has_webpack_config_js %}

    stage('Build webpack') {
      steps {
        sh 'make build_webpack'
      }
    }
{% endif %}

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      parallel {
        stage('docker') {
          stages {
            stage('Pull production cache') {
              steps {
                sh '''
                  docker pull $IMAGE_BRANCH \
                  && docker tag $IMAGE_BRANCH $IMAGE_CI-prod-cache \
                  || (docker pull $IMAGE_BRANCH_DEV \
                  && docker tag $IMAGE_BRANCH_DEV $IMAGE_CI-prod-cache) \
                  || echo 'no prod layer build cache available'
                '''
              }
              post {
                cleanup {
                  sh '''
                    docker rmi --force \
                      $IMAGE_BRANCH \
                      $IMAGE_BRANCH_DEV \
                  '''
                }
              }
            }
            stage('Build production') {
              when {
                expression {
                  env.SHARELATEX_DOCKER_REPOS != null
                }
              }
              steps {
                sh 'make build_prod'
              }
            }
            stage('docker push') {
              when {
                expression {
                  env.SHARELATEX_DOCKER_REPOS != null
                }
              }
              steps {
                sh 'docker tag $IMAGE_CI-prod $IMAGE'
                sh 'docker push $IMAGE'
                sh 'docker tag $IMAGE $IMAGE_BRANCH'
                sh 'docker push $IMAGE_BRANCH'
              }
              post {
                cleanup {
                  sh '''
                    docker rmi --force \
                      $IMAGE \
                      $IMAGE_BRANCH \
                  '''
                }
              }
            }
          }
        }
{% if has_webpack_config_js %}
        stage('archive public') {
          steps {
            sh '''
              docker run \
                --rm \
                --volume $PWD/compress.sh:/compress.sh \
                --user root \
                --workdir /app/public \
                --entrypoint sh \
                $IMAGE_CI-webpack \
                  -c '/compress.sh && tar --create .' \
              | xz -9e \
              > public.tar.xz
            '''
            archiveArtifacts artifacts: 'public.tar.xz', fingerprint: true
          }
          post {
            cleanup {
              sh 'rm -f public.tar.xz'
            }
          }
        }
{% endif %}
      }
    }
  }

{% block post %}
  post {
    cleanup {
      sh 'make clean_ci'
    }
  }
{% endblock %}
}

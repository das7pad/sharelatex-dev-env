{% from 'macros/header.j2' import header with context %}
{{ header('//') }}

{% set docker_image_app = (
    name + ':$BRANCH_NAME-$BUILD_NUMBER'
  ) %}
{% set docker_image_app_origin = (
    '$SHARELATEX_DOCKER_REPOS/' + docker_image_app
  ) %}
{% set docker_image_app_origin_branch = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':$BRANCH_NAME'
  ) %}
{% set docker_image_app_origin_branch_dev = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':dev'
  ) %}
pipeline {
  agent {
{% block agent %}
    label 'sharelatex'
{% endblock %}
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
    IMAGE_CI = "ci/{{ docker_image_app }}"
    IMAGE_NODE = 'node:{{ node_version }}'
  }

  stages {
    stage('Prepare environment') {
      stages {
{% block pull_external %}
{% endblock %}
        stage('Pull node image') {
            when {
                expression {
                    env.DOCKER_REGISTRY != null
                }
            }
            steps {
                sh 'docker pull $DOCKER_REGISTRY/$IMAGE_NODE'
                sh 'docker tag $DOCKER_REGISTRY/$IMAGE_NODE $IMAGE_NODE'
            }
            post {
                cleanup {
                    sh 'docker rmi --force $DOCKER_REGISTRY/$IMAGE_NODE'
                }
            }
        }
        stage('Pull Cache') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE_BRANCH = "{{ docker_image_app_origin_branch }}"
            IMAGE_BRANCH_DEV = "{{ docker_image_app_origin_branch_dev }}"
          }
          steps {
            sh '''
              docker pull $IMAGE_BRANCH \
              && docker tag $IMAGE_BRANCH $IMAGE_CI-cache \
              || (docker pull $IMAGE_BRANCH_DEV \
              && docker tag $IMAGE_BRANCH_DEV $IMAGE_CI-cache) \
              || echo 'no app layer build cache available'
            '''
          }
          post {
            cleanup {
              sh '''
                docker rmi --force \
                  $IMAGE_BRANCH \
                  $IMAGE_BRANCH_DEV \
              '''
            }
          }
        }
        stage('Cleanup and Create Output Directory For Test Results') {
          steps {
            sh 'mkdir --parents --mode=777 output'
            sh '''
              docker run --rm \
                --volume $PWD/output:/home/node \
                --user node \
                $IMAGE_NODE \
                sh -c 'find /home/node -mindepth 1 | xargs rm -rfv'
            '''
          }
        }
        stage('Clean Previous artifacts') {
          steps {
            sh 'git clean -xdf'
            sh 'mkdir --parents --mode=777 output'
          }
        }
      }
    }
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }
{% block lint %}

        stage('Linting') {
          steps {
            sh 'make lint'
          }
        }
{% endblock %}

{% if has_unit_tests %}
        stage('Unit Tests') {
          steps {
            sh 'make test_unit'
          }
          post {
            always {
              xunit (tools: [JUnit(pattern: 'output/unit.xml')])
            }
          }
        }
{% endif %}

{% if has_acceptance_tests %}
        stage('Acceptance Tests') {
{% if acceptance_creds == 'aws' %}
          when {
            allOf {
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET != null
              }
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS != null
              }
            }
          }
          environment {
            AWS_BUCKET = "$SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET"
            AWS_ACCESS = credentials('SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS')
            AWS_ACCESS_KEY_ID = "$AWS_ACCESS_USR"
            AWS_SECRET_ACCESS_KEY = "$AWS_ACCESS_PSW"
          }
{% endif %}
{% block acceptance_tests %}
          steps {
            sh 'make test_acceptance'
          }
{% endblock %}
          post {
{% if not has_submitted_acceptance_test_results %}
            always {
              xunit (tools: [JUnit(pattern: 'output/acceptance.xml')])
            }
{% endif %}
            cleanup {
              sh 'make clean_test_acceptance'
            }
          }
        }
{% endif %}
      }
    }

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('docker push') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE = "{{ docker_image_app_origin }}"
            IMAGE_BRANCH = "{{ docker_image_app_origin_branch }}"
          }
          steps {
            sh 'docker tag $IMAGE_CI $IMAGE'
            sh 'docker push $IMAGE'
            sh 'docker tag $IMAGE $IMAGE_BRANCH'
            sh 'docker push $IMAGE_BRANCH'
          }
          post {
            cleanup {
              sh '''
                docker rmi --force \
                  $IMAGE \
                  $IMAGE_BRANCH \
              '''
            }
          }
        }
{% block archive %}
{% endblock %}
      }
    }
  }

{% block post %}
  post {
    cleanup {
      sh 'make clean_ci'
      sh 'docker rmi --force $IMAGE_NODE'
    }
  }
{% endblock %}
}

{% set url_texlive_docker_image = (
    'https://github.com/das7pad/sharelatex-docker-images.git#:texlive'
  ) %}
{% set docker_image_texlive_origin = (
    '$SHARELATEX_DOCKER_REPOS/texlive:full-2017'
  ) %}
{% set docker_image_texlive_upstream = (
    'quay.io/sharelatex/texlive-full:2017.1'
  ) %}
{% set docker_image_app = (
    name + ':$BRANCH_NAME-$BUILD_NUMBER'
  ) %}
{% set docker_image_app_origin = (
    '$SHARELATEX_DOCKER_REPOS/' + docker_image_app
  ) %}
{% set docker_image_app_origin_branch = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':$BRANCH_NAME'
  ) %}
{% set docker_image_app_origin_branch_dev = (
    '$SHARELATEX_DOCKER_REPOS/' + name + ':dev'
  ) %}
pipeline {
  agent {
    label 'sharelatex'
  }
  environment {
    DOCKER_COMPOSE_FLAGS = "-f docker-compose.ci.yml"
    IMAGE_CI = "ci/{{ docker_image_app }}"
  }

  stages {
    stage('Prepare environment') {
      stages {
        {% if name == 'clsi' %}
        stage('Pull Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          environment {
            TEXLIVE_IMAGE = "{{ docker_image_texlive_origin }}"
          }
          steps {
            sh  '''
                set -ex
                docker pull $TEXLIVE_IMAGE \
                || (
                  docker build \
                    -t $TEXLIVE_IMAGE \
                    --build-arg TEXLIVE_SCHEME=full \
                    {{ url_texlive_docker_image }} \
                  && \
                  docker push $TEXLIVE_IMAGE
                )
                '''
            sh 'docker tag $TEXLIVE_IMAGE {{ docker_image_texlive_upstream }}'
          }
        }
        stage('Build Texlive') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS == null
            }
          }
          options {
            timeout(time: 2, unit: 'HOURS')
          }
          steps {
            sh  '''
                docker build \
                  -t {{ docker_image_texlive_upstream }} \
                  --build-arg TEXLIVE_SCHEME=full \
                  {{ url_texlive_docker_image }}
                '''
          }
        }
        {% endif %}
        stage('Pull Cache') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE_BRANCH = "{{ docker_image_app_origin_branch }}"
            IMAGE_BRANCH_DEV = "{{ docker_image_app_origin_branch_dev }}"
          }
          steps {
            sh '''
              docker pull $IMAGE_BRANCH \
              && docker tag $IMAGE_BRANCH $IMAGE_CI-cache \
              && docker rmi $IMAGE_BRANCH \
              || docker pull $IMAGE_BRANCH_DEV \
              && docker tag $IMAGE_BRANCH_DEV $IMAGE_CI-cache \
              && docker rmi $IMAGE_BRANCH_DEV \
              || true
            '''
            sh '''
              docker pull $IMAGE_BRANCH-build \
              && docker tag $IMAGE_BRANCH-build $IMAGE_CI-build-cache \
              && docker rmi $IMAGE_BRANCH-build \
              || docker pull $IMAGE_BRANCH_DEV-build \
              && docker tag $IMAGE_BRANCH_DEV-build $IMAGE_CI-build-cache \
              && docker rmi $IMAGE_BRANCH_DEV-build \
              || true
            '''
          }
        }
      }
    }
    stage('CI') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('Build') {
          steps {
            sh 'make build'
          }
        }
{% block lint %}

        stage('Linting') {
          steps {
            sh 'make lint'
          }
        }
{% endblock %}

        stage('Unit Tests') {
          steps {
            sh 'make test_unit'
          }
        }

{% block acceptance_tests %}
{% if acceptance_creds == 'aws' %}
        stage('Acceptance Tests S3') {
          when {
            allOf {
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET != null
              }
              expression {
                env.SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS != null
              }
            }
          }
          environment {
            AWS_BUCKET = "$SHARELATEX_S3_DOCSTORE_TEST_AWS_BUCKET"
            AWS_ACCESS = credentials('SHARELATEX_S3_DOCSTORE_TEST_AWS_KEYS')
            AWS_ACCESS_KEY_ID = "$AWS_ACCESS_USR"
            AWS_SECRET_ACCESS_KEY = "$AWS_ACCESS_PSW"
          }
          steps {
            sh 'make test_acceptance'
          }
        }
{% else %}
        stage('Acceptance Tests') {
          steps {
            sh 'make test_acceptance'
          }
        }
{% endif %}
{% endblock %}
      }
    }

    stage('Submit results') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      stages {
        stage('docker push') {
          when {
            expression {
              env.SHARELATEX_DOCKER_REPOS != null
            }
          }
          environment {
            IMAGE = "{{ docker_image_app_origin }}"
            IMAGE_BRANCH = "{{ docker_image_app_origin_branch }}"
          }
          steps {
            sh 'docker tag $IMAGE_CI $IMAGE'
            sh 'docker push $IMAGE'
            sh 'docker tag $IMAGE $IMAGE_BRANCH'
            sh 'docker push $IMAGE_BRANCH'
            sh 'docker tag $IMAGE_CI-build $IMAGE_BRANCH-build'
            sh 'docker push $IMAGE_BRANCH-build'
            sh 'docker rmi $IMAGE $IMAGE_BRANCH $IMAGE_BRANCH-build'
          }
        }
      }
    }
  }

{% block post %}
  post {
    cleanup {
      sh 'make test_clean'
      sh 'make clean'
    }
  }
{% endblock %}
}

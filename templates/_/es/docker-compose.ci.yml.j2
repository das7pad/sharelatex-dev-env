{% from 'macros/header.j2' import header with context %}
{{ header('#') }}
{% set ci_image = 'ci/$PROJECT_NAME:$BRANCH_NAME-$BUILD_NUMBER' %}

version: "3.1"

services:
  test_unit:
    image: {{ ci_image }}
{% if not has_entrypoint %}
    user: node
{% endif %}
    command:
      - npx
      - mocha
      - --exit
      - --recursive
{% if has_unit_test_bootstrap %}
      - --require
      - test/unit/bootstrap.js
{% endif %}
      - --reporter
      - xunit
      - --reporter-options
      - output=/home/node/unit.xml,suiteName='Unit Tests'
      - test/unit/{{ src_dir }}
{% if name == 'web' %}
      - modules/*/test/unit/{{ src_dir }}/**.js
{% endif %}
    volumes:
      - ./output:/home/node:z


  test_acceptance:
    build: .
    image: {{ ci_image }}
    environment:
      LOG_LEVEL: fatal
{% for dependency in dependencies %}
{% if dependency.startswith('redis') %}
      {{ env_prefix[dependency[6:]] }}_REDIS_HOST: {{ dependency }}
{% elif dependency == 'mongo' %}
      MONGO_HOST: mongo
{% endif %}
{% endfor %}
{% if name == 'filestore' %}
      BACKEND: ${BACKEND}
      S3_BACKEND: ${S3_BACKEND}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE}
      AWS_KEY: ${AWS_KEY}
      AWS_SECRET: ${AWS_SECRET}
      AWS_S3_USER_FILES_BUCKET_NAME: ${AWS_BUCKET_USER}
      AWS_S3_TEMPLATE_FILES_BUCKET_NAME: ${AWS_BUCKET_TEMPLATE}
      AWS_S3_PUBLIC_FILES_BUCKET_NAME: ${AWS_BUCKET_PUBLIC}
{% endif %}
{% if acceptance_creds == 'aws' %}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET: ${AWS_BUCKET}
{% endif %}
      MOCHA_GREP: ${MOCHA_GREP}
{% if name == 'filestore' %}
      ENABLE_CONVERSIONS: "true"
{% endif %}
{% if name == 'clsi' %}
      TEXLIVE_IMAGE: quay.io/sharelatex/texlive-full:2017.1
      TEXLIVE_IMAGE_USER: "tex"
      DOCKER_RUNNER: "true"
      COMPILES_HOST_DIR: $PWD/compiles
      SYNCTEX_BIN_HOST_PATH: $PWD/bin/synctex
      SQLITE_PATH: /app/compiles/db.sqlite
      SHARELATEX_CONFIG: /app/config/settings.defaults.coffee
{% endif %}
{% if name == 'web' %}
      SHARELATEX_ALLOW_PUBLIC_ACCESS: 'true'
      PROJECT_HISTORY_ENABLED: 'true'
      ENABLED_LINKED_FILE_TYPES: 'url,project_file,project_output_file,mendeley,zotero'
      LINKED_URL_PROXY: 'http://localhost:6543'
      SHARELATEX_CONFIG: /app/test/acceptance/config/settings.test.coffee
      NODE_ENV: production
{% endif %}
{% if name == 'read-only' %}
      SHARELATEX_CONFIG: /app/config/settings.test.js
{% endif %}
{% if dependencies %}
    depends_on:
{% endif %}
{% for dependency in dependencies %}
      - {{ dependency }}
{% endfor %}
{% if not has_entrypoint %}
    user: node
{% endif %}
    entrypoint:
{% if has_entrypoint %}
      - /bin/sh
      - entrypoint.sh
{% endif %}
      - npx
      - mocha
      - --exit
      - --recursive
{% if has_acceptance_test_bootstrap %}
      - --require
      - test/acceptance/bootstrap.js
{% endif %}
      - --reporter
      - xunit
      - --reporter-options
    command:
      - output=/home/node/acceptance.xml,suiteName='App Acceptance Tests'
{% if has_acceptance_test_init %}
      - test/acceptance/{{ src_dir }}/Init.js
{% endif %}
      - test/acceptance/{{ src_dir }}
    volumes:
      - ./output:/home/node:z
{% if name == 'clsi' %}
      - /var/run/docker.sock:/var/run/docker.sock:rw,z
      - ./compiles:/app/compiles:z
      - ./cache:/app/cache:z
      - ./bin/synctex:/app/bin/synctex:z
{% endif %}

{% if name == 'web' %}
  test_frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.ci
      args:
        PROJECT_NAME: $PROJECT_NAME
        BRANCH_NAME: $BRANCH_NAME
        BUILD_NUMBER: $BUILD_NUMBER
    working_dir: /app
    command: npm run test:frontend -- --single-run
    user: node
    volumes:
      - ./output:/home/node:z
{%- endif %}


  tar:
    build: .
    image: {{ ci_image }}
    volumes:
      - ./:/tmp/build/
    command: tar -czf /tmp/build/build.tar.gz --exclude=build.tar.gz --exclude-vcs .
    user: root

{% for dependency in dependencies %}
{% if dependency.startswith('redis') %}
  {{ dependency }}:
    image: redis
{% endif %}
{% endfor %}

{% if 'mongo' in dependencies %}
  mongo:
    image: mongo:3.4
{% endif %}

{% if 'minio' in dependencies %}
  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_BROWSER: 'off'
      MINIO_ACCESS_KEY: ${AWS_KEY}
      MINIO_SECRET_KEY: ${AWS_SECRET}

  minio_setup:
    image: minio/mc
    entrypoint: sh
    command:
      - -c
      - >
        sleep 2
        && mc config host add minio http://minio:9000 ${AWS_KEY} ${AWS_SECRET}
        && mc mb --ignore-existing minio/${AWS_BUCKET_USER}
        && mc mb --ignore-existing minio/${AWS_BUCKET_TEMPLATE}
        && mc mb --ignore-existing minio/${AWS_BUCKET_PUBLIC}
        && mc admin trace minio
    depends_on:
      - minio
{% endif %}

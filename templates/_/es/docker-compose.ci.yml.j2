{% from 'macros/header.j2' import header with context %}
{{ header('#') }}

version: "3.1"

services:
  test_unit:
    image: ${IMAGE_CI}-dev
    user: node
    environment:
      NODE_OPTIONS: "--unhandled-rejections=strict --trace-deprecation"
    entrypoint:
{% if has_modules %}
      - sh
      - -c
      # evaluate the modules/*/test/unit/src wildcard
      - '$$@'
      - --
{% endif %}
      - npx
      - mocha
      - --exit
      - --recursive
{% if has_unit_test_bootstrap %}
{%   if mocha_6 is defined %}
      - --file
{%   else %}
      - --require
{%   endif %}
      - test/unit/bootstrap.js
{% endif %}
      - --reporter
      - xunit
      - --reporter-options
      - output=/home/node/unit.xml,suiteName='UnitTests'
      - test/unit/{{ src_dir }}
{% if has_modules %}
      - modules/*/test/unit/{{ src_dir }}
{% endif %}
    volumes:
      - ./output:/home/node:z


  test_acceptance:
    image: ${IMAGE_CI}-dev
    environment:
      LOG_LEVEL: fatal
{% for dependency in dependencies %}
{%   if dependency.startswith('redis') %}
      {{ env_prefix[dependency[6:]] }}_REDIS_HOST: {{ dependency }}
{%   elif dependency == 'mongo' %}
      MONGO_HOST: mongo
{%   endif %}
{% endfor %}
{% if 'minio' in dependencies %}
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      AWS_S3_PATH_STYLE: ${AWS_S3_PATH_STYLE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
{%   if name == 'filestore' %}
      AWS_S3_USER_FILES_BUCKET_NAME: ${AWS_BUCKET_USER}
      AWS_S3_TEMPLATE_FILES_BUCKET_NAME: ${AWS_BUCKET_TEMPLATE}
      AWS_S3_PUBLIC_FILES_BUCKET_NAME: ${AWS_BUCKET_PUBLIC}
{%   else %}
      AWS_BUCKET: ${AWS_BUCKET}
{%   endif %}
{% endif %}
      MOCHA_GREP: ${MOCHA_GREP}
{% if name == 'filestore' %}
      ENABLE_CONVERSIONS: "true"
      USE_PROM_METRICS: "true"
{% endif %}
{% if name == 'clsi' %}
      ALLOWED_IMAGES: "${TEXLIVE_IMAGE:-quay.io/sharelatex/texlive-full:2017.1}"
      TEXLIVE_IMAGE: "${TEXLIVE_IMAGE:-quay.io/sharelatex/texlive-full:2017.1}"
      TEXLIVE_IMAGE_USER: "tex"
      DOCKER_RUNNER: "true"
      COMPILES_HOST_DIR: $PWD/compiles
{% endif %}
{% if name == 'web' %}
      SHARELATEX_ALLOW_PUBLIC_ACCESS: 'true'
      PROJECT_HISTORY_ENABLED: 'true'
      ENABLED_LINKED_FILE_TYPES: 'url,project_file,project_output_file,mendeley,zotero'
      LINKED_URL_PROXY: 'http://localhost:6543'
{%   if has_acceptance_test_config_js %}
      SHARELATEX_CONFIG: /app/test/acceptance/config/settings.test.js
{%   else %}
      SHARELATEX_CONFIG: /app/test/acceptance/config/settings.test.coffee
{%   endif %}
{% endif %}
      NODE_ENV: test
      NODE_OPTIONS: "--unhandled-rejections=strict --trace-deprecation"
{% if name == 'read-only' %}
      SHARELATEX_CONFIG: /app/config/settings.test.js
{% endif %}
{% if name == 'web' %}
      COOKIE_DOMAIN: .overleaf.test
      PUBLIC_URL: 'http://www.overleaf.test:3000'
      HTTP_TEST_HOST: www.overleaf.test
      OT_JWT_AUTH_KEY: "very secret key"
    extra_hosts:
      - 'www.overleaf.test:127.0.0.1'
{% endif %}
{% if dependencies %}
    depends_on:
{% endif %}
{% for dependency in dependencies %}
      - {{ dependency }}
{%   if dependency == 'minio' %}
      - minio_setup
{%   endif %}
{% endfor %}
{% if not has_entrypoint %}
    user: node
{% endif %}
    entrypoint:
{% if has_entrypoint %}
      - /bin/sh
      - entrypoint.sh
{% endif %}
      - npx
      - mocha
      - --exit
      - --recursive
{% if has_acceptance_test_bootstrap %}
{%   if mocha_6 is defined %}
      - --file
{%   else %}
      - --require
{%   endif %}
      - test/acceptance/bootstrap.js
{% endif %}
      - --reporter
      - xunit
      - --reporter-options
    command:
      - output=/home/node/acceptance.xml,suiteName='AppAcceptanceTests'
{% if has_acceptance_test_init %}
      - test/acceptance/{{ src_dir }}/Init.js
{% endif %}
      - test/acceptance/{{ src_dir }}
    volumes:
      - ./output:/home/node:z
{% if name == 'clsi' %}
      - /var/run/docker.sock:/var/run/docker.sock:rw,z
      - ./compiles:/app/compiles:z
{% endif %}
{% if data_dirs %}
    tmpfs:
{%   for data_dir in volumes|default(data_dirs) %}
{%     if data_dir != 'compiles' %}
      - /app/{{ data_dir }}:uid=1000,gid=1000
{%     endif %}
{%   endfor %}
{% endif %}

{% if has_frontend_tests and not has_karma_tests %}
  test_frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.ci
      args:
        - IMAGE_CI
    working_dir: /app
    command: npm run test:frontend:single
    environment:
      NODE_OPTIONS: "--unhandled-rejections=strict --trace-deprecation"
    user: node
    volumes:
      - ./output:/home/node:z
{%- endif %}
{% if has_frontend_tests and has_karma_tests %}

  test_frontend:
    image: ${IMAGE_CI}-dev
    user: node
    environment:
      NODE_OPTIONS: "--unhandled-rejections=strict --trace-deprecation"
    entrypoint:
      - npx
      - mocha
      - --exit
      - --delay
      - --reporter
      - xunit
      - --reporter-options
    command:
      - output=/home/node/jsdom.xml,suiteName='JSDOMTests'
      - test/frontend/buildAndRun.js
    volumes:
      - ./output:/home/node:z

  test_karma:
    build:
      context: .
      dockerfile: Dockerfile.frontend.ci
      args:
        - IMAGE_CI
    working_dir: /app
    command: npm run test:karma:single
    environment:
      NODE_OPTIONS: "--unhandled-rejections=strict --trace-deprecation"
    user: node
    volumes:
      - ./output:/home/node:z
{%- endif %}

{% for dependency in dependencies %}
{%   if dependency.startswith('redis') %}
  {{ dependency }}:
    image: redis
    tmpfs: /data

{%   elif dependency == 'mongo' %}
  mongo:
    image: mongo
    tmpfs: /data

{%   elif dependency == 'minio' %}
  minio:
    image: minio/minio
    command: server /data
    tmpfs: /data
    environment:
      MINIO_BROWSER: 'off'
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}

  minio_setup:
    image: minio/mc
    entrypoint: sh
    command:
      - -c
      - >
        sleep 2
        && mc config host add minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}
{%     if name == 'filestore' %}
        && mc mb --ignore-existing minio/${AWS_BUCKET_USER}
        && mc mb --ignore-existing minio/${AWS_BUCKET_TEMPLATE}
        && mc mb --ignore-existing minio/${AWS_BUCKET_PUBLIC}
{%     else %}
        && mc mb --ignore-existing minio/${AWS_BUCKET}
{%     endif %}
    depends_on:
      - minio

{%   endif %}
{% endfor %}

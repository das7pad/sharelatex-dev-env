{% from 'macros/header.j2' import header with context %}
{{ header('#') }}
{% set label_docker_image = '$(PROJECT_NAME):$(BRANCH_NAME)-$(BUILD_NUMBER)' %}

BUILD_NUMBER ?= local
BRANCH_NAME ?= $(shell git rev-parse --abbrev-ref HEAD)
COMMIT ?= $(shell git rev-parse HEAD)
RELEASE ?= $(shell git describe --tags | sed 's/-g/+/;s/^v//')
PROJECT_NAME = {{ name }}
{% if name == 'filestore' %}
BACKEND ?= fs
S3_BACKEND ?= aws-sdk
S3_ENDPOINT ?= http://minio:9000
S3_FORCE_PATH_STYLE ?= true
AWS_KEY ?= $(shell openssl rand -hex 20)
AWS_SECRET ?= $(shell openssl rand -hex 20)
AWS_BUCKET_USER ?= user
AWS_BUCKET_TEMPLATE ?= template
AWS_BUCKET_PUBLIC ?= public
{% endif %}
DOCKER_COMPOSE_FLAGS ?= -f docker-compose.yml
DOCKER_COMPOSE := BUILD_NUMBER=$(BUILD_NUMBER) \
	BRANCH_NAME=$(BRANCH_NAME) \
	PROJECT_NAME=$(PROJECT_NAME) \
	MOCHA_GREP=${MOCHA_GREP} \
{% if acceptance_creds == 'aws' %}
	AWS_BUCKET=${AWS_BUCKET} \
	AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
	AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
{% endif %}
{% if name == 'filestore' %}
	BACKEND=$(BACKEND) \
	S3_BACKEND=$(S3_BACKEND) \
	S3_ENDPOINT=$(S3_ENDPOINT) \
	S3_FORCE_PATH_STYLE=$(S3_FORCE_PATH_STYLE) \
	AWS_KEY=$(AWS_KEY) \
	AWS_SECRET=$(AWS_SECRET) \
	AWS_BUCKET_USER=$(AWS_BUCKET_USER) \
	AWS_BUCKET_TEMPLATE=$(AWS_BUCKET_TEMPLATE) \
	AWS_BUCKET_PUBLIC=$(AWS_BUCKET_PUBLIC) \
{% endif %}
	docker-compose ${DOCKER_COMPOSE_FLAGS}

clean_ci: clean
clean_ci: clean_build
clean_ci: test_clean

clean_build:
	docker rmi \
		ci/{{ label_docker_image }} \
		ci/{{ label_docker_image }}-cache \
		--force

clean:
{% block clean %}
{% endblock %}

{% block lint %}
lint:
	$(DOCKER_COMPOSE) run --rm test_unit npx eslint .

{% endblock %}
{% block test %}
test: lint test_unit test_acceptance
{% endblock %}

test_unit:
{% if has_unit_tests %}
	$(DOCKER_COMPOSE) run --rm test_unit
{% endif %}

test_acceptance: test_clean test_acceptance_pre_run test_acceptance_run

test_acceptance_run:
{% if has_acceptance_tests %}
	$(DOCKER_COMPOSE) run --rm test_acceptance
{% endif %}

{% block clean_test_acceptance %}
clean_test_acceptance:
{% endblock %}

test_clean:
	$(DOCKER_COMPOSE) down -v -t 0

test_acceptance_pre_run:
{% if has_pre_test_acceptance %}
	$(DOCKER_COMPOSE) run --rm test_acceptance test/acceptance/scripts/pre-run
{% endif %}

{% block build_app %}
build_app:
{% endblock %}

build:
	docker build --tag ci/{{ label_docker_image }} \
		--cache-from ci/{{ label_docker_image }}-cache \
		--build-arg RELEASE=$(RELEASE) \
		--build-arg COMMIT=$(COMMIT) \
		.

tar:
	$(DOCKER_COMPOSE) up tar

publish:

	docker push $(DOCKER_REPO)/{{ label_docker_image }}

.PHONY: clean test test_unit test_acceptance test_clean build publish

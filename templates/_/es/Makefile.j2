{% from 'macros/header.j2' import header with context %}
{{ header('#') }}
{% set label_docker_image = '$(PROJECT_NAME):$(BRANCH_NAME)-$(BUILD_NUMBER)' %}

ifneq (,$(wildcard .git))
git = git
else
# we are in docker, without the .git directory
git = sh -c 'false'
endif

BUILD_NUMBER ?= local
BRANCH_NAME ?= $(shell $(git) rev-parse --abbrev-ref HEAD || echo master)
COMMIT ?= $(shell $(git) rev-parse HEAD || echo HEAD)
RELEASE ?= $(shell $(git) describe --tags || echo v0.0.0 | sed 's/-g/+/;s/^v//')
PROJECT_NAME = {{ name }}
BUILD_DIR_NAME = $(shell pwd | xargs basename | tr -cd '[a-zA-Z0-9_.\-]')
{% if 'minio' in dependencies %}
AWS_S3_ENDPOINT ?= http://minio:9000
AWS_S3_FORCE_PATH_STYLE ?= true
AWS_ACCESS_KEY_ID ?= $(shell openssl rand -hex 20)
AWS_SECRET_ACCESS_KEY ?= $(shell openssl rand -hex 20)
{%   if name == 'filestore' %}
AWS_BUCKET_USER ?= user
AWS_BUCKET_TEMPLATE ?= template
AWS_BUCKET_PUBLIC ?= public
{%   else %}
AWS_BUCKET ?= bucket
{%   endif %}
{% endif %}
DOCKER_COMPOSE_FLAGS ?= -f docker-compose.yml
DOCKER_COMPOSE := BUILD_NUMBER=$(BUILD_NUMBER) \
	BRANCH_NAME=$(BRANCH_NAME) \
	PROJECT_NAME=$(PROJECT_NAME) \
	MOCHA_GREP=${MOCHA_GREP} \
{% if 'minio' in dependencies %}
	AWS_S3_ENDPOINT=$(AWS_S3_ENDPOINT) \
	AWS_S3_FORCE_PATH_STYLE=$(AWS_S3_FORCE_PATH_STYLE) \
	AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) \
	AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) \
{%   if name == 'filestore' %}
	AWS_BUCKET_USER=$(AWS_BUCKET_USER) \
	AWS_BUCKET_TEMPLATE=$(AWS_BUCKET_TEMPLATE) \
	AWS_BUCKET_PUBLIC=$(AWS_BUCKET_PUBLIC) \
{%   else %}
	AWS_BUCKET=$(AWS_BUCKET) \
{%   endif %}
{% endif %}
	docker-compose ${DOCKER_COMPOSE_FLAGS}

ifneq (,$(DOCKER_REGISTRY))
IMAGE_NODE ?= $(DOCKER_REGISTRY)/node:{{ node_version }}
else
IMAGE_NODE ?= node:{{ node_version }}
endif

clean_ci: clean
clean_ci: clean_build

clean_build:
	docker rmi \
		ci/{{ label_docker_image }} \
		ci/{{ label_docker_image }}-base \
		ci/{{ label_docker_image }}-dev-deps \
		ci/{{ label_docker_image }}-dev \
		ci/{{ label_docker_image }}-prod \
{% if has_webpack_config_js %}
		ci/{{ label_docker_image }}-webpack \
{% endif %}
		ci/{{ label_docker_image }}-dev-deps-cache \
		ci/{{ label_docker_image }}-prod-cache \
		--force

clean:
{% block clean %}
{% endblock %}

test: lint
lint:
test: format
format:

{% block lint %}
{#
    - scenario 1
        some eslint dependency changed
        -> lint_full
        -> run the linter on all the source code files
    - scenario 2
        some source code file changed
        -> lint_partial
        -> run the linter on the changed files
    - scenario 3
        misc project files changed
        -> no op
        -> skip linting

    NOTE: the base line for the changed state is the last successful commit in
           CI or the dev branch - see below
#}
SHARELATEX_DOCKER_REPOS ?= local/sharelatex
LINT_RUNNER_IMAGE ?= \
	$(SHARELATEX_DOCKER_REPOS)/lint-runner:{{ lint_runner_version }}
LINT_RUNNER = \
	docker run \
		--rm \
		--tty \
		--volume $(PWD):$(PWD) \
		--workdir $(PWD) \
		--user $(shell id -u):$(shell id -g) \
		$(LINT_RUNNER_IMAGE)

{# set by Jenkins, fall back to dev branch on current remote, then origin #}
GIT_PREVIOUS_SUCCESSFUL_COMMIT ?= $(shell \
{# requires a new git version, tested with 2.17.0, failed with 1.8.3 #}
	$(git) rev-parse --abbrev-ref --symbolic-full-name dev@{u} 2>/dev/null \
	| grep -e /dev \
	|| echo origin/dev)

NEED_FULL_LINT ?= \
	$(shell $(git) diff $(GIT_PREVIOUS_SUCCESSFUL_COMMIT) --name-only \
			| grep --max-count=1 \
				-e .eslintignore \
				-e .eslintrc \
				-e buildscript.txt \
	)

ifeq (,$(NEED_FULL_LINT))
lint: lint_partial
else
lint: lint_full
endif

RUN_LINT ?= $(LINT_RUNNER) eslint
lint_full:
	$(RUN_LINT) .

GIT_DIFF_CMD_FORMAT ?= \
	$(git) diff $(GIT_PREVIOUS_SUCCESSFUL_COMMIT) --name-only \
	| grep --invert-match \
		-e vendor \
	| grep \
		-e '\.js$$' \
{% if has_frontend_stylesheets %}
		-e '\.less$$' \
{% endif %}
	| sed 's|^|$(PWD)/|'

FILES_FOR_FORMAT ?= $(wildcard $(shell $(GIT_DIFF_CMD_FORMAT)))
{% if has_frontend_stylesheets %}
{# eslint can not parse .less files #}
FILES_FOR_LINT ?= $(wildcard $(shell $(GIT_DIFF_CMD_FORMAT) | grep -e '\.js$$'))
{% else %}
FILES_FOR_LINT ?= $(FILES_FOR_FORMAT)
{% endif %}

lint_partial:
ifneq (,$(FILES_FOR_LINT))
	$(RUN_LINT) $(FILES_FOR_LINT)
endif


NEED_FULL_FORMAT ?= \
	$(shell $(git) diff $(GIT_PREVIOUS_SUCCESSFUL_COMMIT) --name-only \
			| grep --max-count=1 \
				-e .prettierignore \
				-e .prettierrc \
				-e buildscript.txt \
	)

ifeq (,$(NEED_FULL_FORMAT))
format: format_partial
format_fix: format_fix_partial
else
format: format_full
format_fix: format_fix_full
endif

RUN_FORMAT ?= $(LINT_RUNNER) prettier-eslint
format_full:
	$(RUN_FORMAT) '$(PWD)/**/*.{js,less}' --list-different
format_fix_full:
	$(RUN_FORMAT) '$(PWD)/**/*.{js,less}' --write

format_partial:
ifneq (,$(FILES_FOR_LINT))
	$(RUN_FORMAT) $(FILES_FOR_FORMAT) --list-different
endif
format_fix_partial:
ifneq (,$(FILES_FOR_LINT))
	$(RUN_FORMAT) $(FILES_FOR_FORMAT) --write
endif
{% endblock %}


UNIT_TEST_DOCKER_COMPOSE ?= \
	COMPOSE_PROJECT_NAME=unit_test_$(BUILD_DIR_NAME) $(DOCKER_COMPOSE)

test: test_unit
test_unit:
{% if has_unit_tests %}
	$(UNIT_TEST_DOCKER_COMPOSE) run --rm test_unit
{% endif %}

clean_ci: clean_test_unit
clean_test_unit:
{% if has_unit_tests %}
	$(UNIT_TEST_DOCKER_COMPOSE) down --timeout 0
{% endif %}


ACCEPTANCE_TEST_DOCKER_COMPOSE ?= \
	COMPOSE_PROJECT_NAME=acceptance_test_$(BUILD_DIR_NAME) $(DOCKER_COMPOSE)

test: test_acceptance
test_acceptance: test_acceptance_app
test_acceptance_run: test_acceptance_app_run
test_acceptance_app: clean_test_acceptance_app
test_acceptance_app: test_acceptance_app_run

{% block test_acceptance %}
test_acceptance_app_run:
{% if has_acceptance_tests %}
	$(ACCEPTANCE_TEST_DOCKER_COMPOSE) run --rm test_acceptance
{% endif %}
{% endblock %}

test_acceptance_app_run: test_acceptance_pre_run
test_acceptance_pre_run:
{% if has_pre_test_acceptance %}
	$(ACCEPTANCE_TEST_DOCKER_COMPOSE) run --rm \
		--entrypoint bash \
	 	test_acceptance \
	 		test/acceptance/scripts/pre-run
{% endif %}
{% if 'minio' in dependencies %}
	$(ACCEPTANCE_TEST_DOCKER_COMPOSE) up minio_setup
{% endif %}

clean_ci: clean_test_acceptance
clean_test_acceptance: clean_test_acceptance_app
clean_test_acceptance_app:
{% if has_acceptance_tests %}
	$(ACCEPTANCE_TEST_DOCKER_COMPOSE) down --volumes --timeout 0
{% endif %}

{% block clean_test_acceptance %}
{% endblock %}


{% if has_frontend_tests %}
FRONTEND_DOCKER_COMPOSE ?= \
	COMPOSE_PROJECT_NAME=frontend_$(BUILD_DIR_NAME) $(DOCKER_COMPOSE)

build_test_frontend:
	$(FRONTEND_DOCKER_COMPOSE) build test_frontend

test: test_frontend
test_frontend: test_frontend_build_run
test_frontend_build_run: build_test_frontend
test_frontend_build_run: test_frontend_run

test_frontend_run:
	$(FRONTEND_DOCKER_COMPOSE) run --rm test_frontend

clean_test_acceptance: clean_test_frontend
clean_test_frontend:
	$(FRONTEND_DOCKER_COMPOSE) down --rmi local
{% endif %}


{% block build_app %}
build_app:
{% endblock %}

build: clean_build_artifacts
	docker build \
		--cache-from ci/{{ label_docker_image }}-dev-deps-cache \
		--tag ci/{{ label_docker_image }}-base \
		--target base \
		.

	docker build \
		--cache-from ci/{{ label_docker_image }}-base \
		--cache-from ci/{{ label_docker_image }}-dev-deps-cache \
		--tag ci/{{ label_docker_image }}-dev-deps \
		--target dev-deps \
		.

	docker build \
		--cache-from ci/{{ label_docker_image }}-dev-deps \
		--tag ci/{{ label_docker_image }} \
		--tag ci/{{ label_docker_image }}-dev \
		--target dev \
		.

{% if has_webpack_config_js %}
build_webpack: clean_build_artifacts
	docker build \
		--cache-from ci/{{ label_docker_image }}-dev \
		--tag ci/{{ label_docker_image }}-webpack \
		--target webpack \
		.
{% endif %}

build_prod: clean_build_artifacts
	docker build \
		--cache-from ci/{{ label_docker_image }}-dev \
		--tag ci/{{ label_docker_image }}-base \
		--target base \
		.

	docker run \
		--rm \
		--entrypoint tar \
{% if has_webpack_config_js %}
		ci/{{ label_docker_image }}-webpack \
{% else %}
		ci/{{ label_docker_image }}-dev \
{% endif %}
			--create \
			--gzip \
{% if has_index_js %}
			index.js \
{% endif %}
{% if has_app_js %}
			app.js \
{% endif %}
{% if has_app_src %}
			app/{{ src_dir }} \
{% endif %}
{% if has_app_lib %}
			app/lib \
{% endif %}
{% if has_app_templates %}
			app/templates \
{% endif %}
{% if has_app_views %}
			app/views \
{% endif %}
{% if has_config %}
			config \
{% endif %}
{% if has_modules %}
			modules/*/app/ \
			modules/*/index.js \
{% endif %}
{% if has_webpack_config_js %}
			{{ webpack_public_path|default('public/js') }}/manifest.json \
{% endif %}
{% block build_artifacts %}
{% endblock %}
{% if has_entrypoint %}
			entrypoint.sh \
{% endif %}
{% if has_setup_env %}
			setup_env.sh \
{% endif %}
{% if has_smoke_tests %}
			test/smoke/{{ src_dir }} \
{% endif %}
		> build_artifacts.tar.gz

	docker build \
		--build-arg RELEASE=$(RELEASE) \
		--build-arg COMMIT=$(COMMIT) \
		--build-arg BASE=ci/{{ label_docker_image }}-base \
		--cache-from ci/{{ label_docker_image }}-base \
		--cache-from ci/{{ label_docker_image }}-prod-cache \
		--tag ci/{{ label_docker_image }}-prod \
		--file=Dockerfile.production \
		.

clean_ci: clean_build_artifacts
clean_build_artifacts:
	rm -f build_artifacts.tar.gz


clean_ci: clean_output
clean_output:
ifneq (,$(wildcard output/*))
	docker run --rm \
		--volume $(PWD)/output:/home/node \
		--user node \
		--network none \
		$(IMAGE_NODE) \
		sh -c 'find /home/node -mindepth 1 | xargs rm -rfv'
	rm -rfv output
endif

{% if has_modules %}
MODULE_DIRS := $(shell find modules -mindepth 1 -maxdepth 1 -type d -not -name '.git' )
MODULE_MAKEFILES := $(MODULE_DIRS:=/Makefile)

$(MODULE_MAKEFILES): Makefile.module
	cp Makefile.module $@

clean: clean_Makefiles
clean_Makefiles:
	rm -f $(MODULE_MAKEFILES)

test_acceptance: test_acceptance_modules
test_acceptance_run: test_acceptance_modules_run
test_acceptance_modules: test_acceptance_modules_run
TEST_ACCEPTANCE_MODULES = $(addsuffix /test_acceptance,$(MODULE_DIRS))
test_acceptance_modules_run: $(TEST_ACCEPTANCE_MODULES)

TEST_ACCEPTANCE_CI_MODULES = $(addsuffix /test_acceptance_ci,$(MODULE_DIRS))
test_acceptance_modules_run_ci: $(TEST_ACCEPTANCE_CI_MODULES)

clean_test_acceptance: clean_test_acceptance_modules
CLEAN_TEST_ACCEPTANCE_MODULES = $(addsuffix /clean_test_acceptance,$(MODULE_DIRS))
clean_test_acceptance_modules: $(CLEAN_TEST_ACCEPTANCE_MODULES)

MODULE_TARGETS = \
	$(TEST_ACCEPTANCE_MODULES) \
	$(TEST_ACCEPTANCE_CI_MODULES) \
	$(CLEAN_TEST_ACCEPTANCE_MODULES) \

$(MODULE_TARGETS): $(MODULE_MAKEFILES)
	$(MAKE) -C $(dir $@) $(notdir $@)

.PHONY: $(MODULE_TARGETS)
{% endif %}

.PHONY: clean test test_unit test_acceptance test_clean build

{% from 'macros/header.j2' import header with context %}
{{ header('#') }}
{% set ci_image = 'ci/$PROJECT_NAME:$BRANCH_NAME-$BUILD_NUMBER' %}

version: "3.1"

services:
  test_unit:
    image: node:{{ node_version }}
    volumes:
      - .:/app
    working_dir: /app
    environment:
      MOCHA_GREP: ${MOCHA_GREP}
    command: npm run test:unit
{% if not has_entrypoint %}
    user: node
{% endif %}

  test_acceptance:
{% if name == 'web' %}
    image: node:{{ node_version }}
{% else %}
    build: .
{% endif %}
    volumes:
      - .:/app
{% if name == 'clsi' %}
      - /var/run/docker.sock:/var/run/docker.sock:rw
{% endif %}
    working_dir: /app
    environment:
      LOG_LEVEL: fatal
{% for dependency in dependencies %}
{% if dependency.startswith('redis') %}
      {{ env_prefix[dependency[6:]] }}_REDIS_HOST: {{ dependency }}
{% elif dependency == 'mongo' %}
      MONGO_HOST: mongo
{% endif %}
{% endfor %}
{% if 'minio' in dependencies %}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE}
      AWS_KEY: ${AWS_KEY}
      AWS_SECRET: ${AWS_SECRET}
{%   if name == 'filestore' %}
      BACKEND: ${BACKEND}
      S3_BACKEND: ${S3_BACKEND}
      AWS_S3_USER_FILES_BUCKET_NAME: ${AWS_BUCKET_USER}
      AWS_S3_TEMPLATE_FILES_BUCKET_NAME: ${AWS_BUCKET_TEMPLATE}
      AWS_S3_PUBLIC_FILES_BUCKET_NAME: ${AWS_BUCKET_PUBLIC}
{%   else %}
      AWS_BUCKET: ${AWS_BUCKET}
{%   endif %}
{% endif %}
{% if acceptance_creds == 'aws' %}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET: ${AWS_BUCKET}
{% endif %}
      MOCHA_GREP: ${MOCHA_GREP}
{% if name == 'filestore' %}
      ENABLE_CONVERSIONS: "true"
{% endif %}
{% if name == 'clsi' %}
      TEXLIVE_IMAGE: quay.io/sharelatex/texlive-full:2017.1
      TEXLIVE_IMAGE_USER: "tex"
      DOCKER_RUNNER: "true"
      COMPILES_HOST_DIR: $PWD/compiles
      SYNCTEX_BIN_HOST_PATH: $PWD/bin/synctex
      SHARELATEX_CONFIG: /app/config/settings.defaults.coffee
{% endif %}
{% if name == 'web' %}
      SHARELATEX_ALLOW_PUBLIC_ACCESS: 'true'
      PROJECT_HISTORY_ENABLED: 'true'
      ENABLED_LINKED_FILE_TYPES: 'url,project_file,project_output_file,mendeley,zotero'
      LINKED_URL_PROXY: 'http://localhost:6543'
      SHARELATEX_CONFIG: /app/test/acceptance/config/settings.test.coffee
      NODE_ENV: test
{% endif %}
{% if name == 'read-only' %}
      SHARELATEX_CONFIG: /app/config/settings.test.js
{% endif %}
{% if not has_entrypoint %}
    user: node
{% endif %}
{% if dependencies %}
    depends_on:
{% endif %}
{% for dependency in dependencies %}
      - {{ dependency }}
{% endfor %}
{% if name == 'web' %}
    command: npm run test:acceptance:run_dir test/acceptance/{{ src_dir }}
{% else %}
    command: npm run test:acceptance
{% endif %}

{% if name == 'web' %}
  test_frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      - .:/app
    working_dir: /app
    command: npm run test:frontend:single
{%- endif %}

{% for dependency in dependencies %}
{% if dependency.startswith('redis') %}
  {{ dependency }}:
    image: redis
{% endif %}
{% endfor %}

{% if 'mongo' in dependencies %}
  mongo:
    image: mongo
{% endif %}

{% if 'minio' in dependencies %}
  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: ${AWS_KEY}
      MINIO_SECRET_KEY: ${AWS_SECRET}

  minio_setup:
    image: minio/mc
    entrypoint: sh
    command:
      - -c
      - >
        sleep 2
        && mc config host add minio http://minio:9000 ${AWS_KEY} ${AWS_SECRET}
{% if name == 'filestore' %}
        && mc mb --ignore-existing minio/${AWS_BUCKET_USER}
        && mc mb --ignore-existing minio/${AWS_BUCKET_TEMPLATE}
        && mc mb --ignore-existing minio/${AWS_BUCKET_PUBLIC}
{% else %}
        && mc mb --ignore-existing minio/${AWS_BUCKET}
{% endif %}
        && mc admin trace minio
    depends_on:
      - minio
{% endif %}
